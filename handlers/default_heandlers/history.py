from telebot.types import Message
from loader import bot
from loguru import logger
from database.models import HotelRequest, Hotel
from handlers.special_heandlers.finish_work import finish_work
import time
from states.user_states import UserState
from telebot.types import Message, CallbackQuery
from keyboards.inline.keyboard_yes_or_no import keyboards_yes_or_no


@bot.message_handler(commands=['history'])
@logger.catch()
def bot_history(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤—ã–¥–∞—á–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"""
    logger.info('–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "history"')
    bot.set_state(message.from_user.id, UserState.history, message.chat.id)
    send_history(message.from_user.id, message.chat.id)


@logger.catch()
def send_history(user_id: int, chat_id: int, index: int = 0):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–µ–ª–µ–π"""
    logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–µ–ª–µ–π')
    my_request = HotelRequest.select().where(HotelRequest.user_id == user_id)\
        .order_by(-HotelRequest.date)[index]

    text = f'üîç –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {my_request.command}\n\n' \
           f'üìÖ –î–∞—Ç–∞: {my_request.date.split()[0]}\n' \
           f'üïë –í—Ä–µ–º—è: {my_request.date.split()[1]}\n\n' \
           f'{my_request.main_info}'

    bot.send_message(user_id, text)

    hotels = Hotel.select().where(Hotel.request_id == my_request.id).order_by(Hotel.num_queue)
    for i_hotel in hotels:
        bot.send_message(user_id, i_hotel.hotel_info)
        time.sleep(1.1)

    if len(HotelRequest.select().where(HotelRequest.user_id == user_id)) - 1 == index:
        bot.send_message(user_id, 'üõë –ó–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç', )
        finish_work(user_id, chat_id)
    else:
        keyboards = keyboards_yes_or_no([str(index + 1), '0'])
        bot.send_message(user_id, '–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å?', reply_markup=keyboards)


@bot.callback_query_handler(func=lambda call:
                            bot.get_state(call.from_user.id, call.message.chat.id) == 'UserState:history')
@logger.catch()
def response_processing(call: CallbackQuery) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ –≤—ã–¥–∞—á–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    logger.info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–ø—Ä–æ—Å–µ –æ –≤—ã–¥–∞—á–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')

    bot.delete_message(call.message.chat.id, call.message.id)
    if call.data == '0':
        finish_work(call.from_user.id, call.message.chat.id)
    else:
        send_history(call.from_user.id, call.message.chat.id, int(call.data) + 1)


@bot.message_handler(state=UserState.history)
@logger.catch()
def error_input_date(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö"""
    bot.send_message(message.chat.id, '–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π, –≤–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ '
                                      '—Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!\n'
                                      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤—ã—à–µ')
